객체란? 이름이 있는 정보를 정리정돈 할 때 쓰는 도구이다.

읽을 때는 .이나 []를 통해서 읽을 수 있다.

값을 지울 때는 delete.

. 뒤에는 변수가 못 옴. 어떠한 속성이 와야된다.

객체의 반복문은 이런게 있다는 것 정도만 알면된다. 필수적인 것은 아님.

메소드: 객체에 포함된 함수

생성자(constructor): new func() 같이 'new'라는 키워드를 붙이면 됨.
객체를 생성하는 함수. 코드의 재사용성을 높이고 객체를 초기화하는 역할.

프로토타입: 모든 객체들이 메소드와 속성들을 상속받기 위한 템플릿으로써 프로토타입 객체를 가진다.
생성자 안에 메소드를 정의하는 코드가 들어 있지 않기 때문에 객체가 생성될 때마다 호출되지 않고 한번만 생성됨.
메모리를 절약할 수 있다. 하나의 객체에서만 함수를 다르게 동작시키기도 용이함.

클래스: ECMA script 6 버전부터 지원. https://caniuse.com 에서 ES6 classes를 검색하여 확인.
https://babeljs.io 에서 새로운 문법을 기존의 문법으로 변환해줌.
객체를 생성할 때 자동으로 constructor가 호출된다.
생성자와 마찬가지로 특정 객체의 메소드만 수정하고 싶다면 새로 정의하면 된다.
해당 객체가 특성의 갖고 있는지 확인하고 있으면 호출하고 없으면 클래스의 특성을 가져와 호출한다.

상속: extends 라는 키워드를 이용한다. class PersonPlus extends Person

super: 부모 클래스의 기능을 실행 시킴
super(): 부모 클래스의 생성자가 호출이 된다. 새로운 내용을 자식 클래스에서 추가해서 쓸 수 있다.

자바스크립트에서는 객체가 직접 상속을 받을 수 있다. prototype link만 바꾸면 상속 받는 대상을 바꿀 수 있다.

__proto__: JS 표준은 아닌데 거의 모든 브라우저에서 지원하는 기능.
prototype link를 바꿔서 객체를 상속을 받을 수 있다.
prototype은 클래스에서 생성자, 메서드 추가가 필요할 때 클래스에 접근하기 위해 사용하는 키워드.
__proto__는 이미 만들어진 객체에서 프로토타입 링크를 연결할 때 사용하는 키워드.

Object.create: 부모로 지정할 객체를 넣어주면 상속 받는 객체를 만들 수 있다. 정석적인 방법.
debugger를 이용하면 자바스크립트를 일시중지 시킬 수 있다.

자바스크립트의 함수는 단독으로 쓰일 수도 있다. new와 조합되면 객체를 만드는 생성자가 될 수도 있다.
객체, 클래스에 종속될 수도 있다.

사실 함수도 객체이다. call이라는 메소드를 가진다.

func.call(sth, a, b, c) // call의 첫번째 매개변수는 this로 지정할 객체. 나머지는 함수의 인자가 들어간다.

bind는 call처럼 실행할 때마다 this를 변경하는 것이 아니라 내부적으로 고정시킨다.
bind는 this가 고정된 새로운 함수를 리턴한다.
call의 첫번째 매개변수는 this로 지정할 객체. 나머지는 함수의 인자가 들어간다.

prototype vs __proto__

Person의 prototype은 Person.prototype을 가르키고
Person.prototype.constructor는 Person을 가르킨다. 서로 상호 참조.
new Person으로 새로운 객체를 만들면 constructor 함수가 실행되면서
Person의 프로퍼티 값이 생성이 되고 동시에 __proto__가 생긴다.
__proto__는 Person.prototype을 참조한다.

어떤 객체가 있는데 그 객체가 자체적으로 갖고 있지 않은 값을 사용하려고 한다.
이 때 어떤 데이터를 근거로 어디에서 값을 찾아내는가?
